<?php
//Start session in this script
session_start();
//connect to DB
require ("connection.php");

$APIResponse = array("arr_status"=>array());

$arr_return_stat = array("scan_status"=>0, "isUserOnline"=>0);
$arr_return_stat = array_merge($arr_return_stat, $con_status);
$trueVar =1;
$falseVar =0;

$errHandler = array("query_error"=>"NONE", "error"=>"NONE");
//Important note: On buying ticket you will be marked as customer. When scanning you enter your code for verification
//If u buy the ticket from an agent you will be given a security scanning code or the agent can add u as customer when giving u the ticket if u have an account
//WORK TO GET DONE
//When buying online give user access to set security code or leave his password has default
//When agent is selling he can choose to tag user to ticket or ticket will be tag to his name, and security code will be generated by system
//On scanning user will be asked to enter security code that can be whether the custom security code or his password if ticket is tag on his name if not agent password
//While creating ticket qrcode build the url and add the hash in the var 'th'

//ALGORITHM
//1-verify if user online
//2-Get hashcode
//3- Hashcode event related
//4-Check user online rights to scann this ticket-event (event-director/agent)
//5-Mark ticket has scanned
//6-update related table (ticket table counter)
//7-Return failure or success of scan

try{
    
    if(isset($_SESSION['idUser'])){
        //SET FALGS
        $arr_return_stat['isUserOnline'] = 1;

        //GET POST VAR
        $hashCode = isset($_POST['hashcode'])?$_POST['hashcode']:"";
        $securityCode = isset($_POST['security_code'])? $_POST['security_code'] : ""; //Make this line of code better whenever u can
        //prepare date
        $scanDateTime = isset($_POST['scan_date_time'])? $_POST['scan_date_time']: "0000-00-00 00:00:00"; 
        //$datePastLimit=date_create($pastDateBorder);
        //$datePastLimitFormated = date_format($datePastLimit,"Y-m-d H:i:s");

        //SQLs
        //Check if hashcode exists
        $sql_event_hashcode = "SELECT `idEvent`, `directorFK`, `idTicket`, `idCustomerFK`, `securityCode`, `scanned`, `idAgentFK` FROM ((`ticket_order` INNER JOIN `event_ticket` ON `ticket_order`.`idTicketFK` = `event_ticket`.`idTicket`) INNER JOIN `event` ON `event_ticket`.`idEventFK` = `event`.`idEvent`) WHERE `event_ticket`.`ticketHash` =?";
        $stmt_event_hashcode = $connection->prepare($sql_event_hashcode);

        //get user password if user used his password as security code
        $sql_get_user_pwd = "SELECT `password` FROM `user` WHERE `idUser`= ?";
        $stmt_user_pwd = $connection->prepare($sql_get_user_pwd);

        //check user rights for sca....
        $sql_get_rights = "SELECT `scanningRight` FROM `event_agent` WHERE `idAgentFK` =? AND `idEventFK` =? AND `scanningRight` =?";
        $stmt_get_rights = $connection->prepare($sql_get_rights);
        
        //Update event_ticket 
        $sql_update_ticket = "UPDATE `ticket_order` SET `scanned` =?, `whoFK` =?, `when` =? WHERE `idTicketFK`=?"; 
        $stmt_update_ticket = $connection->prepare($sql_update_ticket);

       //verify if hashcode exists
       $stmt_event_hashcode->execute([$hashCode]);
       if($stmt_event_hashcode->rowCount()>0){
           //valid hashcode
           $row_event_hashcode = $stmt_event_hashcode->fetch();
           //Verify if ticket has been already scanned
           if($row_event_hashcode['scanned'] ==0){
               //not yet scanned
               //verify scanning rights
               $stmt_get_rights->execute([$_SESSION['idUser'], $row_event_hashcode['idEvent'], $trueVar]);
               if($stmt_get_rights->rowCount()>0){
                    //user is agent of this event and have right to scann
                    //Security code match
                    $security_match = false;
                 
                    //security code correspond to user password
                    if($row_event_hashcode['securityCode']!=NULL && $row_event_hashcode['securityCode']==$_POST['security_code']){
                        $security_match = true;
                    }
                    else{
                        $stmt_user_pwd->execute([$row_event_hashcode['idCustomerFK']]);
                        if($stmt_user_pwd->rowCount()>0){
                            $row_user_pwd = $stmt_user_pwd->fetch();
                            if(password_verify($_POST['security_code'], $row_user_pwd['password'])){$security_match =true;} else{$errHandler['error'] ="SECURITY_CODE_UNMATCHED";}
                        }
                        else{
                            $errHandler['error'] ="ID_CUSTOMER_NOT_FOUND";
                        }
                    }

                   if($security_match){
                       //If security match scan ticket
                        if($stmt_update_ticket->execute([$trueVar, $_SESSION['idUser'], $scanDateTime, $row_event_hashcode['idTicket']])){
                            //Ticket scanned successfully
                            $arr_return_stat['scan_status'] = 1;
                        }
                   }
               }
               else{
                   //user doesn't have the right to scan this event
                   $errHandler['error'] ="NO_SCANNING_RIGHTS";
               }
               
           }
           else{
               //already scanned
               $errHandler['error'] = "ALREADY_SCANNED";
           }
       }
       else{
           //invalid hashcode
           $errHandler['error'] = "INVALID_HASHCODE";
       }


    }
    else{
        $errHandler['error'] = "NO_USER_ONLINE";
    }

}catch(PDOException $e){
    $errHandler['query_error'] = $e->getMessage();
}

//Prepare return APIResponse
$arr_return_stat = array_merge($arr_return_stat, $errHandler);
$APIResponse['arr_status'] = $arr_return_stat;

//var_dump($APIResponse);
header('Content-type:application/json');
echo json_encode($APIResponse);